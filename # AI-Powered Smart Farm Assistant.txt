# AI-Powered Smart Farm Assistant

from flask import Flask, render_template, request
import requests
import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing import image
import os

# Initialize Flask App
app = Flask(__name__)

# ðŸ”¹ Weather Forecasting Function
def get_weather(api_key, city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"
    response = requests.get(url)
    return response.json()

# ðŸ”¹ Crop Disease Detection Model (CNN)
def load_trained_model():
    return tf.keras.models.load_model("crop_disease_model.h5")

def predict_crop_disease(img_path):
    model = load_trained_model()
    img = image.load_img(img_path, target_size=(128, 128))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    prediction = np.argmax(model.predict(img_array), axis=1)
    return f"Predicted Disease Class: {prediction[0]}"

# ðŸ”¹ Inventory Management System
class Inventory:
    def __init__(self, file="inventory.csv"):
        self.file = file
        try:
            self.data = pd.read_csv(file)
        except FileNotFoundError:
            self.data = pd.DataFrame(columns=["Item", "Quantity"])

    def update_stock(self, item, quantity):
        if item in self.data["Item"].values:
            self.data.loc[self.data["Item"] == item, "Quantity"] += quantity
        else:
            self.data = pd.concat([self.data, pd.DataFrame([{"Item": item, "Quantity": quantity}])], ignore_index=True)
        self.data.to_csv(self.file, index=False)

    def get_stock(self):
        return self.data

# ðŸ”¹ Flask Routes (Web Interface)
@app.route('/')
def home():
    return "Welcome to the AI Smart Farm Assistant!"

@app.route('/weather', methods=['GET', 'POST'])
def weather():
    if request.method == 'POST':
        city = request.form['city']
        api_key = "YOUR_OPENWEATHERMAP_API_KEY"
        data = get_weather(api_key, city)
        return f"Weather in {city}: {data['weather'][0]['description']}, Temp: {data['main']['temp']}Â°C"
    return render_template('weather.html')

@app.route('/inventory')
def inventory():
    inv = Inventory()
    return inv.get_stock().to_dict(orient='records')

@app.route('/predict', methods=['POST'])
def predict():
    if 'file' not in request.files:
        return "No file uploaded!"
    
    file = request.files['file']
    file_path = os.path.join("uploads", file.filename)
    file.save(file_path)
    
    prediction = predict_crop_disease(file_path)
    return prediction

# Run the Flask app
if __name__ == '__main__':
    app.run(debug=True)
